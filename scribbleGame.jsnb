{
  "metadata": {
    "name": "New JSNB",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Enhanced Voice-Controlled Game</title>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.4.1/p5.js\"></script>\n  <style>\n    body {\n      margin: 0;\n      padding: 0;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      justify-content: center;\n      min-height: 100vh;\n      background: #0a0a0a;\n      font-family: Arial, sans-serif;\n      color: #fff;\n      overflow: hidden;\n    }\n\n    #gameContainer {\n      position: relative;\n      width: 100vw;\n      height: 100vh;\n    }\n\n    #controls {\n      position: absolute;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n      width: 100%;\n      height: 100%;\n      pointer-events: none;\n    }\n\n    .direction-hint {\n      position: absolute;\n      padding: 15px 30px;\n      background: rgba(255, 255, 255, 0.1);\n      border-radius: 25px;\n      transition: all 0.3s ease;\n      font-size: 1.2em;\n      text-shadow: 0 0 10px rgba(255, 255, 255, 0.5);\n    }\n\n    .direction-hint.up { top: 40px; left: 50%; transform: translateX(-50%); }\n    .direction-hint.down { bottom: 40px; left: 50%; transform: translateX(-50%); }\n    .direction-hint.left { left: 40px; top: 50%; transform: translateY(-50%); }\n    .direction-hint.right { right: 40px; top: 50%; transform: translateY(-50%); }\n\n    #status {\n      position: fixed;\n      top: 20px;\n      left: 50%;\n      transform: translateX(-50%);\n      background: rgba(0, 0, 0, 0.8);\n      padding: 15px 30px;\n      border-radius: 15px;\n      z-index: 100;\n      font-size: 1.2em;\n    }\n\n    #speedControl {\n      position: fixed;\n      bottom: 20px;\n      left: 50%;\n      transform: translateX(-50%);\n      background: rgba(0, 0, 0, 0.8);\n      padding: 15px;\n      border-radius: 15px;\n      z-index: 100;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      gap: 10px;\n    }\n\n    input[type=\"range\"] {\n      width: 200px;\n    }\n  </style>\n</head>\n<body>\n  <div id=\"status\">Click to Start</div>\n  <div id=\"gameContainer\">\n    <div id=\"controls\">\n      <div class=\"direction-hint up\">Say \"UP\"</div>\n      <div class=\"direction-hint down\">Say \"DOWN\"</div>\n      <div class=\"direction-hint left\">Say \"LEFT\"</div>\n      <div class=\"direction-hint right\">Say \"RIGHT\"</div>\n    </div>\n  </div>\n  <div id=\"speedControl\">\n    <label for=\"enemySpeedControl\">Enemy Speed</label>\n    <input type=\"range\" id=\"enemySpeedControl\" min=\"0.5\" max=\"3\" step=\"0.1\" value=\"1\">\n    <label for=\"spawnRateControl\">Spawn Rate</label>\n    <input type=\"range\" id=\"spawnRateControl\" min=\"500\" max=\"3000\" step=\"100\" value=\"2000\">\n  </div>\n\n  <!-- Link to external JS file -->\n  <script src=\"game.js\"></script>\n</body>\n</html>\n",
      "status": "",
      "output": "",
      "type": "code"
    },
    {
      "code": "let playerSize = 60;\nlet score = 0;\nlet gameOver = false;\nlet enemySpeed = 1;\nlet spawnRate = 2000;\nlet recognition;\nlet lastCommand = \"\";\nlet bullets = [];\nlet enemies = [];\nlet particles = [];\nlet commands = [\"up\", \"down\", \"left\", \"right\"];\nlet canvas;\nlet playerPulse = 0;\nlet statusElement;\nlet spawnInterval;\nlet gameStarted = false;\n\nfunction setup() {\n  canvas = createCanvas(windowWidth, windowHeight);\n  canvas.parent('gameContainer');\n  frameRate(60);\n\n  statusElement = document.getElementById('status');\n  \n  // Initialize with larger player size for full screen\n  playerSize = min(width, height) / 10;\n\n  // Setup click to start\n  canvas.mousePressed(() => {\n    if (!gameStarted) {\n      startGame();\n    } else if (gameOver) {\n      resetGame();\n    }\n  });\n}\n\nfunction startGame() {\n  gameStarted = true;\n  setupVoiceRecognition();\n  setupControls();\n  startSpawning();\n  updateStatus('Game Started - Voice Recognition Active!');\n}\n\nfunction setupControls() {\n  document.getElementById('enemySpeedControl').addEventListener('input', function(e) {\n    enemySpeed = parseFloat(e.target.value);\n  });\n\n  document.getElementById('spawnRateControl').addEventListener('input', function(e) {\n    spawnRate = parseInt(e.target.value);\n    startSpawning();\n  });\n}\n\nfunction startSpawning() {\n  if (spawnInterval) clearInterval(spawnInterval);\n  spawnInterval = setInterval(spawnEnemy, spawnRate);\n}\n\nfunction setupVoiceRecognition() {\n  try {\n    recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\n    recognition.continuous = true;\n    recognition.interimResults = true;\n\n    recognition.onstart = () => {\n      updateStatus('Voice Recognition Active - Speak a direction!');\n    };\n\n    recognition.onresult = (event) => {\n      const results = event.results[event.results.length - 1];\n      for (let i = 0; i < results.length; i++) {\n        const command = results[i].transcript.toLowerCase().trim();\n        if (commands.includes(command)) {\n          lastCommand = `Last heard: ${command}`;\n          fireBullet(command.toUpperCase());\n          highlightDirection(command);\n          break;\n        }\n      }\n    };\n\n    recognition.onerror = (event) => {\n      updateStatus('Error: ' + event.error);\n      // Attempt to restart recognition after error\n      setTimeout(() => {\n        if (!gameOver && gameStarted) recognition.start();\n      }, 1000);\n    };\n\n    recognition.onend = () => {\n      if (!gameOver && gameStarted) recognition.start();\n    };\n\n    recognition.start();\n  } catch (e) {\n    updateStatus('Error: Speech recognition not supported in this browser');\n  }\n}\n\nfunction updateStatus(message) {\n  statusElement.textContent = message;\n}\n\nfunction highlightDirection(direction) {\n  const element = document.querySelector(`.direction-hint.${direction}`);\n  if (element) {\n    element.style.background = 'rgba(255, 255, 255, 0.3)';\n    setTimeout(() => {\n      element.style.background = 'rgba(255, 255, 255, 0.1)';\n    }, 200);\n  }\n}\n\nfunction draw() {\n  background(10, 10, 15);\n  \n  if (!gameStarted) {\n    // Draw start screen\n    fill(255);\n    textAlign(CENTER, CENTER);\n    textSize(32);\n    text('Click to Start', width/2, height/2);\n    return;\n  }\n\n  push();\n  translate(width/2, height/2);\n  \n  // Draw player\n  fill(255);\n  circle(0, 0, playerSize);\n  \n  // Update and draw game elements\n  if (!gameOver) {\n    // Update and draw bullets\n    for (let bullet of bullets) {\n      bullet.update();\n      bullet.display();\n    }\n    \n    // Update and draw enemies\n    for (let enemy of enemies) {\n      enemy.update();\n      enemy.display();\n    }\n    \n    // Draw score\n    fill(255);\n    textAlign(LEFT);\n    textSize(24);\n    text(`Score: ${score}`, -width/2 + 20, -height/2 + 40);\n  } else {\n    // Draw game over screen\n    fill(255);\n    textAlign(CENTER);\n    textSize(48);\n    text('Game Over!', 0, 0);\n    textSize(24);\n    text(`Final Score: ${score}`, 0, 50);\n    text('Click to Restart', 0, 100);\n  }\n  \n  pop();\n}\n\nfunction windowResized() {\n  resizeCanvas(windowWidth, windowHeight);\n  playerSize = min(width, height) / 10;\n}\n\nclass Enemy {\n  constructor(direction, distance) {\n    this.direction = direction;\n    this.size = playerSize * 0.5;\n    this.x = direction === \"LEFT\" ? -distance : direction === \"RIGHT\" ? distance : 0;\n    this.y = direction === \"UP\" ? -distance : direction === \"DOWN\" ? distance : 0;\n  }\n\n  update() {\n    switch(this.direction) {\n      case \"UP\": this.y += enemySpeed; break;\n      case\n",
      "status": "",
      "output": "",
      "type": "code"
    }
  ],
  "source": "https://github.com/gopi-suvanam/jsnb",
  "run_on_load": false
}